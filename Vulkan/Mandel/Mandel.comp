#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 32
layout (local_size_x = WORKGROUP_SIZE, local_size_y = WORKGROUP_SIZE, local_size_z = 1 ) in;

struct MandelArgs {
    float xCent;
    float yCent;
    float dX;
    float dY;
    int iter;
    int nx;
    int ny;
 };

layout(std140,binding = 1) uniform buf1
{
   MandelArgs args;
};

// Be careful with layout std140 - it forces alignment in ways
// you might not expect. If you use it for the float array it will
// assume all elements are 16bytes apart - basically forcing an
// alignment suitable for vec4 quantities, but not for floats.

layout(binding = 0) buffer buf
{
   float imageData[];
};

void main() {

  /*
  In order to fit the work into workgroups, some unnecessary threads are launched.
  We terminate those threads here. 
  */
  
  if(gl_GlobalInvocationID.x >= args.nx || gl_GlobalInvocationID.y >= args.ny)
    return;

  float gridXcent = args.nx * 0.5;
  float gridYcent = args.ny * 0.5;
  float x = args.xCent + (float(gl_GlobalInvocationID.x) - gridXcent) * args.dX;
  float y = args.yCent + (float(gl_GlobalInvocationID.y) - gridYcent) * args.dY;

  vec2 c = vec2(x,y);
  vec2 z = vec2(0.0,0.0);
  float n = 0.0;
  const int M = args.iter;
  for (int i = 0; i<M; i++)
  {
    n++;
    z = vec2(z.x*z.x - z.y*z.y, 2.*z.x*z.y) + c;
    if (dot(z, z) > 4.0) break;
  }
  if (n >= M) n = 0.0;
                    
  imageData[args.nx * gl_GlobalInvocationID.y + gl_GlobalInvocationID.x] = n;
}
